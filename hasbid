#!/usr/bin/env ruby
#:cal SetSyn("Ruby")

Dir.chdir File.dirname(__FILE__)

$config = {
    startmenu_on_all_screens: false
}

require 'bundler'
Bundler.require 
class WebViewWindow
    attr_accessor :window, :screen, :webview
    def initialize
        @window = Gtk::Window.new :toplevel
        @window.set_type_hint 6
        @window.set_decorated false
        @screen = @window.get_screen
        @webview = WebKit::WebView.new
        @scroll = Gtk::ScrolledWindow.new nil, nil
        @window.add @scroll
        @scroll.add @webview
        GObject.signal_connect(@window, "destroy") { Gtk.main_quit }
        transparent
        post_init
    end
    # TODO: This doesn't work and I don't know why.
    def transparent
        visual = @screen.get_rgba_visual()
        @window.set_visual visual
        @scroll.set_visual visual
        @webview.set_transparent true
    end
    def erb path
        erb = Erubis::Eruby.new(File.read("views/#{path.to_s}.erb"))
        result = erb.result(binding())
        @window.show_all
        @webview.load_html_string(result, "file://#{File.absolute_path("./web/#{path.to_s}")}")
    end
    def post_init
    end
    def destroy
        @window.destroy
    end
    def animate_move x, y, time
        start = Time.new
        pos = @window.get_position
        anim_tick = proc do
            time_since = Time.new - start
            if time_since >= time
                @window.move x,y
            else
                # Animation: Swing
                scale = 0.5 - Math.cos(time_since/time*Math::PI)/2
                ## Animation: Linear
                #scale = time_since/time
                new_x = pos[0]+(x-pos[0])*scale
                new_y = pos[1]+(y-pos[1])*scale
                @window.move new_x, new_y
                EM.next_tick anim_tick
            end
        end
        anim_tick.call
    end
    def animate_opacity opacity, time
        start = Time.new
        start_opacity = @window.get_opacity
        anim_tick = proc do
            time_since = Time.new - start
            if time_since >= time
                @window.set_opacity opacity
            else
                # Animation: Swing
                scale = 0.5 - Math.cos(time_since/time*Math::PI)/2
                ## Animation: Linear
                #scale = time_since/time
                new_opacity = start_opacity+(opacity-start_opacity)*scale
                @window.set_opacity new_opacity
                EM.next_tick anim_tick
            end
        end
        anim_tick.call
    end
end

class StartMenu < WebViewWindow
    def post_init
        @window.resize @screen.get_width, @screen.get_height
        if not $config['startmenu_on_all_screens']
            @window.fullscreen
            @window.maximize
        end
        erb :index
    end
end
class ApplicationSwitcher < WebViewWindow
    def post_init
        @window.resize 190, @screen.get_height
        @window.move -190, 0
        erb :launcher
        animate_move 0, 0, 0.2
    end
end

def init
    # Set process name
    $0 = "hasbid"
    # Setup window
    GirFFI.setup :WebKit, '3.0'
    Gtk.init
    $app_info = []
    get_applications
    help = false
    forke = true
    ARGV.each do |arg|
        case arg
        when "startmenu"
            $startmenu = StartMenu.new
        when "applicationswitcher"
            $applicationswitcher = ApplicationSwitcher.new
        when "pry"
            binding.pry
        when "help"
            help = true
        when "nofork"
            forke = false
        when "kill"
            old_pid = `cat /run/user/\`id -u\`/hasbid`
            if old_pid.length == 0
                puts "hasbid process not found."
            else
                puts "Killing hasbid (pid: #{old_pid})"
                `kill -9 #{old_pid}`
                `rm /run/user/\`id -u\`/hasbid`
            end
            Process::exit
        else
            puts "Unrecognized argument: #{arg}"
            help = true
        end
    end
    if help
        puts "usage: hasbi [startmenu|applicationswitcher|pry|help] [startmenu|applicationswitcher|pry|help] [...]"
        Process::exit
    end
    if forke
        old_pid = `cat /run/user/\`id -u\`/hasbid`
        if old_pid.length > 0
            puts "hasbid is already running! If not, run: hasbid kill"
            Process::exit
        end
        puts "Forking to background..."
        pid = fork
        if pid
            `echo "#{pid}" > /run/user/\`id -u\`/hasbid`
            Process::exit
        end
    end
end
def get_applications
    $app_info = []
    Dir.glob('/usr/share/applications/*.desktop').each do |app|
        if File.file? app
            text = File.open(app).read
            data = {}
            icon_theme = Gtk::IconTheme.get_default
            lines = text.split("\n")
            lines.each do |line|
                bits = line.split("=")
                if bits.length>1
                    if bits[0]=="Name" or bits[0]=="Exec" or bits[0]=="C__filepath__ rubyomment"
                        data[bits[0]]=bits[1]
                    elsif bits[0]=="Icon"
                        if bits[1][0]=='/'
                            data[bits[0]]=bits[1]
                        else
                            icon_name = bits[1].split('.')[0]
                            if icon_theme.has_icon icon_name
                                data[bits[0]]= icon_theme.lookup_icon(icon_name,64,0).get_filename.read_string
                            elsif icon_theme.has_icon bits[1]
                                data[bits[0]]= icon_theme.lookup_icon(bits[1],64,0).get_filename.read_string
                            else
                                puts "[ERROR::NO_ICON] #{icon_name}, #{bits[1]}"
                            end

                            #data[bits[0]]=`find {/usr/share/icons,/usr/share/pixmaps} -iname "#{bits[1]}"`.strip
                        end
                    end
                end
            end
            $app_info << data
        end
    end
    $app_info.sort! do |a,b|
        a["Name"].downcase <=> b["Name"].downcase
    end
end

def get_name_bits
    full = GLib.get_real_name
    bits = full.split ' '
    first = bits[0]
    last = bits[1..-1].join ' '
    return [first,last]
end
class HttpHost < EM::Connection
    include EM::HttpServer
    def post_init
        super
        no_environment_strings
    end
    def process_http_request
        # the http request details are available via the following instance variables:
        #   @http_protocol
        #   @http_request_method
        #   @http_cookie__filepath__ ruby
        #   @http_if_none_match
        #   @http_content_type
        #   @http_path_info
        #   @http_request_uri
        #   @http_query_string
        #   @http_post_content
        #   @http_headers
        #puts @http_request_uri
        bits = @http_request_uri.split("/")
        if bits[1]=="snapshot"
            win_id = bits[2]
            EM.defer do
                response = EM::DelegatedHttpResponse.new(self)
                response.status = 200
                response.content_type 'image/png'
                response.content = `xwd -display $DISPLAY -id #{win_id}|convert -thumbnail 167x93 xwd:- png:-`
                response.send_response
            end
        elsif bits[1]=="launch"
            response = EM::DelegatedHttpResponse.new(self)
            response.status = 200
            response.content_type 'text/html'
            response.content = "Launching: #{bits[2]}"
            case bits[2]
            when "startmenu"
                if $startmenu
                    $startmenu.destroy
                    $startmenu = nil
                else
                    $startmenu = StartMenu.new
                end
            when "applicationswitcher"
                if $applicationswitcher
                    $applicationswitcher.destroy
                    $applicationswitcher = nil
                else
                    $applicationswitcher = ApplicationSwitcher.new
                end
            else
                response.content = "[ERROR] Unrecognized launch option: #{bits[2]}"
                puts response.content
            end
            response.send_response
        end
    end
end
EM::run do
    init
    give_tick = proc { 
        Gtk::main_iteration; EM.next_tick(give_tick)
    }
    give_tick.call
    # Start Websocket
    EM::WebSocket.start(:host => "localhost", :port => 38473) do |ws|
        ws.onopen { |handshake|
            puts "WebSocket connection open"

            # Access properties on the EM::WebSocket::Handshake object, e.g.
            # path, query_string, origin, headers
        }
        ws.onclose { puts "Connection closed" }
        ws.onmessage { |msg|
            puts "Received command: #{msg}"
            ws.send(MultiJson.dump(eval(msg)))
        }
    end
    EM.start_server 'localhost', 38474, HttpHost
end
